# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jk5u9POxio4Fjw7cVRqEQ0ea9-etlU_3
"""

# ==========================
# TUGAS 1 - NAIVE BAYES CLASSIFIER
# ==========================
# Nama File : tugas1.ipynb
# Dataset diambil dari tabel frekuensi (total 30 record)
# ==========================

# --- Import Library ---
import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')  # Hilangkan warning kuning di Colab

from IPython.display import display  # untuk menampilkan DataFrame dengan rapi

# --- 1. Dataset (berdasarkan tabel frekuensi) ---

# Jumlah total data
total = 30

# Probabilitas prior
p_buy_yes = 24 / total    # dari semua tabel jumlah "Buy=Yes" = 24
p_buy_no  = 6 / total     # sisanya "Buy=No" = 6

print("P(Buy=Yes) =", round(p_buy_yes, 3))
print("P(Buy=No)  =", round(p_buy_no, 3))

# --- 2. Probabilitas kondisional (dari tabel) ---

# Discount
p_discount_yes_buy_yes = 19 / 24
p_discount_no_buy_yes  = 5 / 24
p_discount_yes_buy_no  = 1 / 6
p_discount_no_buy_no   = 5 / 6

# Free Delivery
p_delivery_yes_buy_yes = 21 / 24
p_delivery_no_buy_yes  = 3 / 24
p_delivery_yes_buy_no  = 2 / 6
p_delivery_no_buy_no   = 4 / 6

# Day
p_day_weekday_buy_yes = 9 / 24
p_day_weekend_buy_yes = 7 / 24
p_day_holiday_buy_yes = 8 / 24

p_day_weekday_buy_no = 2 / 6
p_day_weekend_buy_no = 1 / 6
p_day_holiday_buy_no = 3 / 6


# --- 3. Fungsi Naive Bayes ---
def naive_bayes(day, delivery, discount):
    """
    Menghitung probabilitas Buy=Yes dan Buy=No
    berdasarkan fitur yang diberikan.
    """

    # Pilih probabilitas berdasarkan hari
    if day == "Weekday":
        p_day_yes, p_day_no = p_day_weekday_buy_yes, p_day_weekday_buy_no
    elif day == "Weekend":
        p_day_yes, p_day_no = p_day_weekend_buy_yes, p_day_weekend_buy_no
    elif day == "Holiday":
        p_day_yes, p_day_no = p_day_holiday_buy_yes, p_day_holiday_buy_no
    else:
        raise ValueError("Hari tidak valid: pilih Weekday, Weekend, atau Holiday")

    # Pilih probabilitas berdasarkan Free Delivery
    if delivery == "Yes":
        p_delivery_yes, p_delivery_no = p_delivery_yes_buy_yes, p_delivery_yes_buy_no
    else:
        p_delivery_yes, p_delivery_no = p_delivery_no_buy_yes, p_delivery_no_buy_no

    # Pilih probabilitas berdasarkan Discount
    if discount == "Yes":
        p_discount_yes, p_discount_no = p_discount_yes_buy_yes, p_discount_yes_buy_no
    else:
        p_discount_yes, p_discount_no = p_discount_no_buy_yes, p_discount_no_buy_no

    # Rumus Naive Bayes
    prob_yes = p_buy_yes * p_day_yes * p_delivery_yes * p_discount_yes
    prob_no  = p_buy_no  * p_day_no  * p_delivery_no  * p_discount_no

    # Normalisasi agar hasilnya seperti probabilitas
    total_prob = prob_yes + prob_no
    p_yes_norm = prob_yes / total_prob
    p_no_norm  = prob_no  / total_prob

    hasil = "Buy=Yes" if p_yes_norm > p_no_norm else "Buy=No"
    return p_yes_norm, p_no_norm, hasil


# --- 4. Hitung berdasarkan pertanyaan a-h pada soal ---

cases = [
    ("Weekday", "Yes", "Yes"),
    ("Weekday", "Yes", "No"),
    ("Weekday", "No", "Yes"),
    ("Weekday", "No", "No"),
    ("Weekend", "Yes", "Yes"),
    ("Weekend", "No", "Yes"),
    ("Weekend", "Yes", "No"),
    ("Weekend", "No", "No"),
]

results = []

for i, (day, delivery, discount) in enumerate(cases, start=1):
    p_yes, p_no, hasil = naive_bayes(day, delivery, discount)
    results.append({
        "Kasus": i,
        "Day": day,
        "Free Delivery": delivery,
        "Discount": discount,
        "P(Buy=Yes|X)": round(p_yes, 4),
        "P(Buy=No|X)": round(p_no, 4),
        "Prediksi": hasil
    })

df = pd.DataFrame(results)
print("\n=== HASIL PERHITUNGAN NAIVE BAYES ===")
display(df)


# --- 5. Visualisasi hasil probabilitas ---
plt.figure(figsize=(10, 6))
plt.bar(df["Kasus"], df["P(Buy=Yes|X)"], label="Buy=Yes", alpha=0.7)
plt.bar(df["Kasus"], df["P(Buy=No|X)"], label="Buy=No", alpha=0.7)
plt.title("Perbandingan Probabilitas Tiap Kasus")
plt.xlabel("Kasus")
plt.ylabel("Probabilitas")
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()